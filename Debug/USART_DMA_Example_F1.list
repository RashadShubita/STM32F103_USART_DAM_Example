
USART_DMA_Example_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001854  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001960  08001960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a4c  08001a4c  00011a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b8  20000014  08001a64  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200001cc  08001a64  000201cc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003eb0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d30  00000000  00000000  00023eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000280  00000000  00000000  00024c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00024ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001883  00000000  00000000  000250b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000011c2  00000000  00000000  00026933  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027af5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000008a0  00000000  00000000  00027b74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001948 	.word	0x08001948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001948 	.word	0x08001948

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__aeabi_d2uiz>:
 80008e0:	004a      	lsls	r2, r1, #1
 80008e2:	d211      	bcs.n	8000908 <__aeabi_d2uiz+0x28>
 80008e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008e8:	d211      	bcs.n	800090e <__aeabi_d2uiz+0x2e>
 80008ea:	d50d      	bpl.n	8000908 <__aeabi_d2uiz+0x28>
 80008ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f4:	d40e      	bmi.n	8000914 <__aeabi_d2uiz+0x34>
 80008f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000902:	fa23 f002 	lsr.w	r0, r3, r2
 8000906:	4770      	bx	lr
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	4770      	bx	lr
 800090e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000912:	d102      	bne.n	800091a <__aeabi_d2uiz+0x3a>
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	4770      	bx	lr
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	4770      	bx	lr

08000920 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da0b      	bge.n	800094c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000934:	490d      	ldr	r1, [pc, #52]	; (800096c <NVIC_SetPriority+0x4c>)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 030f 	and.w	r3, r3, #15
 800093c:	3b04      	subs	r3, #4
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800094a:	e009      	b.n	8000960 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800094c:	4908      	ldr	r1, [pc, #32]	; (8000970 <NVIC_SetPriority+0x50>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	e000e100 	.word	0xe000e100

08000974 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000982:	d301      	bcc.n	8000988 <SysTick_Config+0x14>
 8000984:	2301      	movs	r3, #1
 8000986:	e011      	b.n	80009ac <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SysTick_Config+0x40>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000990:	3b01      	subs	r3, #1
 8000992:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000994:	210f      	movs	r1, #15
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	f7ff ffc1 	bl	8000920 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SysTick_Config+0x40>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <SysTick_Config+0x40>)
 80009a6:	2207      	movs	r2, #7
 80009a8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <SysTick_Delay>:
 * @note    SysTick will be update with IRQ callback
 * @param   Waiting time in milliseconds
 * @retval  None
 */
void SysTick_Delay(uint32_t wait_time_ms)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Store start tick */
  uint32_t startTick = SysTickCounter;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <SysTick_Delay+0x28>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]

  /* Loop until timeout */
  while((SysTickCounter - startTick) < wait_time_ms)
 80009c6:	bf00      	nop
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SysTick_Delay+0x28>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d3f8      	bcc.n	80009c8 <SysTick_Delay+0x10>
  {

  }
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000030 	.word	0x20000030

080009e4 <SysTick_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  uint32_t returnCode;

  /* Update clock configuration */
  SystemCoreClockUpdate();
 80009ea:	f000 fe6f 	bl	80016cc <SystemCoreClockUpdate>

  /* Check clock configuration */
  if(SystemCoreClock != (uint32_t) 8000000)
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <SysTick_Init+0x44>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <SysTick_Init+0x48>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d000      	beq.n	80009fa <SysTick_Init+0x16>
  {
    /* Clock configuration is not OK */
    while(1)
 80009f8:	e7fe      	b.n	80009f8 <SysTick_Init+0x14>
  {
    /* Clock configuration is OK */
  }

  /* Configure SysTick to generate an interrupt every millisecond */
  returnCode = SysTick_Config(SystemCoreClock / 1000);
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <SysTick_Init+0x44>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <SysTick_Init+0x4c>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	099b      	lsrs	r3, r3, #6
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffb4 	bl	8000974 <SysTick_Config>
 8000a0c:	6078      	str	r0, [r7, #4]

  /* Check return code for errors */
  if (returnCode != 0)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d000      	beq.n	8000a16 <SysTick_Init+0x32>
  {
    /* SysTick configuration failed */
    while(1)
 8000a14:	e7fe      	b.n	8000a14 <SysTick_Init+0x30>
  }
  else
  {
    /* Do nothing, SysTick configuration OK */
  }
  NVIC_SetPriority(SysTick_IRQn,  0);
 8000a16:	2100      	movs	r1, #0
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff80 	bl	8000920 <NVIC_SetPriority>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	007a1200 	.word	0x007a1200
 8000a30:	10624dd3 	.word	0x10624dd3

08000a34 <DMA_ChannelEnable>:
 * @note
 * @param   DMAx_Channely   where: x= 1 or 2 , y= 1 ..7 for DMA1 and 1 ..5 for DMA2
 * @retval  None
 */
void DMA_ChannelEnable(DMA_Channel_TypeDef *DMA_Channel,uint8_t DMA_Num, uint8_t Ch_Num)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
 8000a40:	4613      	mov	r3, r2
 8000a42:	70bb      	strb	r3, [r7, #2]
  /*Clears the GIF, TEIF, HTIF and TCIF flags in the DMA_ISR register */
	if(DMA_Num == 1)DMA1->IFCR |= (1 << (4*(Ch_Num-1)) );
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d10b      	bne.n	8000a62 <DMA_ChannelEnable+0x2e>
 8000a4a:	4911      	ldr	r1, [pc, #68]	; (8000a90 <DMA_ChannelEnable+0x5c>)
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <DMA_ChannelEnable+0x5c>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	78ba      	ldrb	r2, [r7, #2]
 8000a52:	3a01      	subs	r2, #1
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	2001      	movs	r0, #1
 8000a58:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	604b      	str	r3, [r1, #4]
 8000a60:	e00a      	b.n	8000a78 <DMA_ChannelEnable+0x44>
	else DMA2->IFCR |= (1 << (4*(Ch_Num-1)) );
 8000a62:	490c      	ldr	r1, [pc, #48]	; (8000a94 <DMA_ChannelEnable+0x60>)
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <DMA_ChannelEnable+0x60>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	78ba      	ldrb	r2, [r7, #2]
 8000a6a:	3a01      	subs	r2, #1
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	2001      	movs	r0, #1
 8000a70:	fa00 f202 	lsl.w	r2, r0, r2
 8000a74:	4313      	orrs	r3, r2
 8000a76:	604b      	str	r3, [r1, #4]
 /* Channel enable */
	DMA_Channel->CCR |=  DMA_CCR1_EN;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f043 0201 	orr.w	r2, r3, #1
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020400 	.word	0x40020400

08000a98 <DMA_ChannelDisable>:
 * @brief   Disable DMA
 * @note
 * @param   DMAx_Channely   where: x= 1 or 2 , y= 1 ..7 for DMA1 and 1 ..5 for DMA2
 * @retval  None
 */
void DMA_ChannelDisable(DMA_Channel_TypeDef *DMA_Channel){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  DMA_Channel->CCR &= ~DMA_CCR1_EN;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 0201 	bic.w	r2, r3, #1
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
	...

08000ab8 <GPIO_OnBoard_Init_LED>:
 * @note    Yellow_LED -> PC13
 * @param   None
 * @retval  None
 */
void GPIO_OnBoard_Init_LED(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
 /* Enable clock for GPIOC */
    RCC ->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000abc:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <GPIO_OnBoard_Init_LED+0x48>)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <GPIO_OnBoard_Init_LED+0x48>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6193      	str	r3, [r2, #24]
 /* Configure PC.13 in output mode, max speed 2 MHz. */
    GPIOC ->CRH &= ~GPIO_CRH_MODE13;
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <GPIO_OnBoard_Init_LED+0x4c>)
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <GPIO_OnBoard_Init_LED+0x4c>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ad2:	6053      	str	r3, [r2, #4]
    GPIOC ->CRH |=  GPIO_CRH_MODE13_1;
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <GPIO_OnBoard_Init_LED+0x4c>)
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <GPIO_OnBoard_Init_LED+0x4c>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ade:	6053      	str	r3, [r2, #4]
 /* Configure PC.13 as  general purpose output push-pull */
    GPIOC ->CRH  &= ~GPIO_CRH_CNF13;
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <GPIO_OnBoard_Init_LED+0x4c>)
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <GPIO_OnBoard_Init_LED+0x4c>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000aea:	6053      	str	r3, [r2, #4]
 /* Led OFF */
    GPIOC ->ODR  |= GPIO_ODR_ODR13;
 8000aec:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <GPIO_OnBoard_Init_LED+0x4c>)
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <GPIO_OnBoard_Init_LED+0x4c>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000af6:	60d3      	str	r3, [r2, #12]

}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40011000 	.word	0x40011000

08000b08 <NVIC_SetPriorityGrouping>:
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EnableIRQ>:
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <NVIC_EnableIRQ+0x2c>)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	095b      	lsrs	r3, r3, #5
 8000b62:	79fa      	ldrb	r2, [r7, #7]
 8000b64:	f002 021f 	and.w	r2, r2, #31
 8000b68:	2001      	movs	r0, #1
 8000b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <NVIC_SetPriority>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	da0b      	bge.n	8000bac <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b94:	490d      	ldr	r1, [pc, #52]	; (8000bcc <NVIC_SetPriority+0x4c>)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 030f 	and.w	r3, r3, #15
 8000b9c:	3b04      	subs	r3, #4
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	761a      	strb	r2, [r3, #24]
}
 8000baa:	e009      	b.n	8000bc0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000bac:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <NVIC_SetPriority+0x50>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <NVIC_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void NVIC_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	  /* Set priority group to 3
	   * bits[3:0] are the sub-priority,
	   * bits[7:4] are the pre-empt priority */

	  NVIC_SetPriorityGrouping(3);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f7ff ff95 	bl	8000b08 <NVIC_SetPriorityGrouping>

	  /* Set priority levels */
	  NVIC_SetPriority(EXTI0_IRQn, 1);
 8000bde:	2101      	movs	r1, #1
 8000be0:	2006      	movs	r0, #6
 8000be2:	f7ff ffcd 	bl	8000b80 <NVIC_SetPriority>
	  NVIC_SetPriority(DMA1_Channel3_IRQn, 1);
 8000be6:	2101      	movs	r1, #1
 8000be8:	200d      	movs	r0, #13
 8000bea:	f7ff ffc9 	bl	8000b80 <NVIC_SetPriority>
	  NVIC_SetPriority(DMA1_Channel4_IRQn, 1);
 8000bee:	2101      	movs	r1, #1
 8000bf0:	200e      	movs	r0, #14
 8000bf2:	f7ff ffc5 	bl	8000b80 <NVIC_SetPriority>
	  NVIC_SetPriority(DMA1_Channel5_IRQn, 1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	200f      	movs	r0, #15
 8000bfa:	f7ff ffc1 	bl	8000b80 <NVIC_SetPriority>
	  NVIC_SetPriority(USART1_IRQn,2);
 8000bfe:	2102      	movs	r1, #2
 8000c00:	2025      	movs	r0, #37	; 0x25
 8000c02:	f7ff ffbd 	bl	8000b80 <NVIC_SetPriority>

	  /* Enable interrupts at NVIC */
	  NVIC_EnableIRQ(EXTI0_IRQn);
 8000c06:	2006      	movs	r0, #6
 8000c08:	f7ff ffa2 	bl	8000b50 <NVIC_EnableIRQ>
	  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c0c:	200d      	movs	r0, #13
 8000c0e:	f7ff ff9f 	bl	8000b50 <NVIC_EnableIRQ>
	  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c12:	200e      	movs	r0, #14
 8000c14:	f7ff ff9c 	bl	8000b50 <NVIC_EnableIRQ>
	  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c18:	200f      	movs	r0, #15
 8000c1a:	f7ff ff99 	bl	8000b50 <NVIC_EnableIRQ>
	  NVIC_EnableIRQ(USART1_IRQn);
 8000c1e:	2025      	movs	r0, #37	; 0x25
 8000c20:	f7ff ff96 	bl	8000b50 <NVIC_EnableIRQ>


}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <NVIC_SetPendingIRQ>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8000c32:	4909      	ldr	r1, [pc, #36]	; (8000c58 <NVIC_SetPendingIRQ+0x30>)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	095b      	lsrs	r3, r3, #5
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	f002 021f 	and.w	r2, r2, #31
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	3340      	adds	r3, #64	; 0x40
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <strCmp>:
 * @param   str1, str2, size
 * @retval  strCmpReturnType
 */
static strCmpReturnType strCmp(const char * str1, const char * str2,
    const uint8_t size)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	71fb      	strb	r3, [r7, #7]
  /* Compare status */
  strCmpReturnType cmpStatus = STR_EQUAL;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointers */
  if((NULL != str1) && (NULL != str2))
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d018      	beq.n	8000ca6 <strCmp+0x4a>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d015      	beq.n	8000ca6 <strCmp+0x4a>
  {
    /* Start comparing */
    for (int idx = 0; idx < size; idx++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	e00e      	b.n	8000c9e <strCmp+0x42>
    {
      /* When not equal set the return status */
      if(str1[idx] != str2[idx])
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	440b      	add	r3, r1
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d001      	beq.n	8000c98 <strCmp+0x3c>
      {
        cmpStatus = STR_NOT_EQUAL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	75fb      	strb	r3, [r7, #23]
    for (int idx = 0; idx < size; idx++)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	79fa      	ldrb	r2, [r7, #7]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dcec      	bgt.n	8000c80 <strCmp+0x24>
  }
  else
  {
    /* Null pointers, do nothing */
  }
  return cmpStatus;
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
	...

08000cb4 <USART1_IRQ_Callback>:
 * @note
 * @param   None
 * @retval  None
 */
void USART1_IRQ_Callback(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* Check if parity error detected */
  if((USART1->SR & USART_SR_PE) == USART_SR_PE)
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <USART1_IRQ_Callback+0x6c>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d10f      	bne.n	8000ce8 <USART1_IRQ_Callback+0x34>
  {
    while((USART1->SR & USART_SR_RXNE) != USART_SR_RXNE)
 8000cc8:	bf00      	nop
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <USART1_IRQ_Callback+0x6c>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	f003 0320 	and.w	r3, r3, #32
 8000cd4:	2b20      	cmp	r3, #32
 8000cd6:	d1f8      	bne.n	8000cca <USART1_IRQ_Callback+0x16>
    {
      /* Wait for RXNE flag to be set */
    }

    /* Read data register to clear parity error */
    (void)USART1->DR;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <USART1_IRQ_Callback+0x6c>)
 8000cda:	889b      	ldrh	r3, [r3, #4]

    /* Set parity error */
    currentErrorStatus = USART1_PARITY_ERROR;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <USART1_IRQ_Callback+0x70>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]

    /* Disable DMA Channel for RX  */
    DMA_ChannelDisable(DMA1_Channel5);
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <USART1_IRQ_Callback+0x74>)
 8000ce4:	f7ff fed8 	bl	8000a98 <DMA_ChannelDisable>
  {
    /* No parity error */
  }

  /* Check if idle line detected */
  if((USART1->SR & USART_SR_IDLE) == USART_SR_IDLE)
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <USART1_IRQ_Callback+0x6c>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	2b10      	cmp	r3, #16
 8000cf4:	d10f      	bne.n	8000d16 <USART1_IRQ_Callback+0x62>
  {
	  uint32_t temp = USART1->SR & USART_SR_IDLE;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <USART1_IRQ_Callback+0x6c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	607b      	str	r3, [r7, #4]
	  temp = USART1->DR;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <USART1_IRQ_Callback+0x6c>)
 8000d04:	889b      	ldrh	r3, [r3, #4]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	607b      	str	r3, [r7, #4]

    /* Disable DMA Channel for RX  */
    DMA_ChannelDisable(DMA1_Channel5);
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <USART1_IRQ_Callback+0x74>)
 8000d0c:	f7ff fec4 	bl	8000a98 <DMA_ChannelDisable>
    /*force DMA1_Channel5_IRQn(USART1_RX_DMA_IRQ_Callback) instead of disable the channel since STM32f1
      can not requests the end of transfers when EN bit is cleared by software */
    NVIC_SetPendingIRQ(DMA1_Channel5_IRQn);
 8000d10:	200f      	movs	r0, #15
 8000d12:	f7ff ff89 	bl	8000c28 <NVIC_SetPendingIRQ>
  }
  else
  {
    /* No new data received */
  }
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40013800 	.word	0x40013800
 8000d24:	20000035 	.word	0x20000035
 8000d28:	40020058 	.word	0x40020058

08000d2c <USART1_TX_DMA_Config>:
 * @note    Used for data transfer between two memory buffers
 * @param   None
 * @retval  None
 */
void USART1_TX_DMA_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Enable clock for DMA1*/
  RCC ->AHBENR |= RCC_AHBENR_DMA1EN;
 8000d30:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <USART1_TX_DMA_Config+0xb0>)
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <USART1_TX_DMA_Config+0xb0>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6153      	str	r3, [r2, #20]

  /* disable channel, since this registers must not be written when the channel is enabled */
 	 if(DMA_CCR1_EN == (DMA_CCR1_EN & DMA1_Channel4->CCR))
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d109      	bne.n	8000d5c <USART1_TX_DMA_Config+0x30>
 	  {
 	    /* DMA 2 stream 5 is enabled, shall be disabled first */
 		  DMA_ChannelDisable(DMA1_Channel4);
 8000d48:	4825      	ldr	r0, [pc, #148]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d4a:	f7ff fea5 	bl	8000a98 <DMA_ChannelDisable>

 	    /* Wait until EN bit is cleared */
 	  while(DMA_CCR1_EN == (DMA_CCR1_EN & DMA1_Channel4->CCR))
 8000d4e:	bf00      	nop
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d0f9      	beq.n	8000d50 <USART1_TX_DMA_Config+0x24>
 	  {
 	    /* Do nothing, stream 5 is not enabled */
 	  }

  /* Set Peripheral size 8-bits (00)*/
  DMA1_Channel4 ->CCR   &= ~DMA_CCR1_PSIZE;
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d66:	6013      	str	r3, [r2, #0]

  /* Set Memory size 8-bits (00)*/
  DMA1_Channel4 ->CCR   &= ~DMA_CCR1_MSIZE;
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d72:	6013      	str	r3, [r2, #0]

  /* Set Channel priority Very high (11)*/
  DMA1_Channel4 ->CCR   |= DMA_CCR1_PL;
 8000d74:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Disable Peripheral increment mode (0) */
  DMA1_Channel4 ->CCR   &= ~DMA_CCR1_PINC;
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d8a:	6013      	str	r3, [r2, #0]

  /* Enable memory increment mode (1)*/
  DMA1_Channel4 ->CCR   |= DMA_CCR1_MINC;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d96:	6013      	str	r3, [r2, #0]

  /* Disable Circular mode (0)*/
  DMA1_Channel4 ->CCR   &= ~DMA_CCR1_CIRC;
 8000d98:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f023 0320 	bic.w	r3, r3, #32
 8000da2:	6013      	str	r3, [r2, #0]

  /* Diable M2M Mode (0) */
  DMA1_Channel4 ->CCR   &= ~DMA_CCR1_MEM2MEM;
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dae:	6013      	str	r3, [r2, #0]

  /* Data transfer direction Read from memory (1)*/
  DMA1_Channel4 ->CCR   |= DMA_CCR1_DIR;
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	6013      	str	r3, [r2, #0]

  /* Enable Transfer complete interrupt */
  DMA1_Channel4 ->CCR   |= DMA_CCR1_TCIE;
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Set address for peripheral */
  DMA1_Channel4 ->CPAR   = (uint32_t)&USART1->DR;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <USART1_TX_DMA_Config+0xb4>)
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <USART1_TX_DMA_Config+0xb8>)
 8000dcc:	609a      	str	r2, [r3, #8]

	__ASM("NOP");
 8000dce:	bf00      	nop
	__ASM("NOP");
 8000dd0:	bf00      	nop
	__ASM("NOP");
 8000dd2:	bf00      	nop
	__ASM("NOP");
 8000dd4:	bf00      	nop
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40020044 	.word	0x40020044
 8000de4:	40013804 	.word	0x40013804

08000de8 <USART1_RX_DMA_Config>:
 * @note    Used for data transfer between two memory buffers
 * @param   None
 * @retval  None
 */
void USART1_RX_DMA_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	 /* Enable clock for DMA1*/
	  RCC ->AHBENR |= RCC_AHBENR_DMA1EN;
 8000dec:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <USART1_RX_DMA_Config+0xbc>)
 8000dee:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <USART1_RX_DMA_Config+0xbc>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6153      	str	r3, [r2, #20]

	  /* disable channel, since this registers must not be written when the channel is enabled */
	 	 if(DMA_CCR1_EN == (DMA_CCR1_EN & DMA1_Channel5->CCR))
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d109      	bne.n	8000e18 <USART1_RX_DMA_Config+0x30>
	 	  {
	 	    /* DMA 2 stream 5 is enabled, shall be disabled first */
	 		  DMA_ChannelDisable(DMA1_Channel5);
 8000e04:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e06:	f7ff fe47 	bl	8000a98 <DMA_ChannelDisable>

	 	    /* Wait until EN bit is cleared */
	 	  while(DMA_CCR1_EN == (DMA_CCR1_EN & DMA1_Channel5->CCR))
 8000e0a:	bf00      	nop
 8000e0c:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d0f9      	beq.n	8000e0c <USART1_RX_DMA_Config+0x24>
	 	  {
	 	    /* Do nothing, stream 5 is not enabled */
	 	  }

	  /* Set Peripheral size 8-bits (00)*/
	 	DMA1_Channel5 ->CCR   &= ~DMA_CCR1_PSIZE;
 8000e18:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e22:	6013      	str	r3, [r2, #0]

	  /* Set Memory size 8-bits (00)*/
	 	DMA1_Channel5 ->CCR   &= ~DMA_CCR1_MSIZE;
 8000e24:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e2e:	6013      	str	r3, [r2, #0]

	  /* Set Channel priority Very high (11)*/
	 	DMA1_Channel5 ->CCR   |= DMA_CCR1_PL;
 8000e30:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e3a:	6013      	str	r3, [r2, #0]

	  /* Disable Peripheral increment mode (0) */
	 	DMA1_Channel5 ->CCR   &= ~DMA_CCR1_PINC;
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e46:	6013      	str	r3, [r2, #0]

	  /* Enable memory increment mode (1)*/
	 	DMA1_Channel5 ->CCR   |= DMA_CCR1_MINC;
 8000e48:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e52:	6013      	str	r3, [r2, #0]

	  /* Disable Circular mode (0)*/
	 	DMA1_Channel5 ->CCR   &= ~DMA_CCR1_CIRC;
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 0320 	bic.w	r3, r3, #32
 8000e5e:	6013      	str	r3, [r2, #0]

	  /* Diable M2M Mode (0) */
	 	DMA1_Channel5 ->CCR   &= ~DMA_CCR1_MEM2MEM;
 8000e60:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e6a:	6013      	str	r3, [r2, #0]

	  /* Data transfer direction Read from peripheral (0)*/
	 	DMA1_Channel5 ->CCR   &= ~DMA_CCR1_DIR;
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 0310 	bic.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]

	  /* Enable Transfer complete interrupt */
	 	DMA1_Channel5 ->CCR   |= DMA_CCR1_TCIE;
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	6013      	str	r3, [r2, #0]

	    /* Set address for peripheral */
	 	DMA1_Channel5 ->CPAR   = (uint32_t)&USART1->DR;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <USART1_RX_DMA_Config+0xc4>)
 8000e88:	609a      	str	r2, [r3, #8]

	    /* Set address for memory */
	 	DMA1_Channel5 ->CMAR   = (uint32_t)RxDMABuffer;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <USART1_RX_DMA_Config+0xc8>)
 8000e8e:	60da      	str	r2, [r3, #12]

		/* Set number of data items */
	 	DMA1_Channel5 ->CNDTR  =  MAX_BUFFER_LENGTH;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <USART1_RX_DMA_Config+0xc0>)
 8000e92:	22c8      	movs	r2, #200	; 0xc8
 8000e94:	605a      	str	r2, [r3, #4]

		__ASM("NOP");
 8000e96:	bf00      	nop
		__ASM("NOP");
 8000e98:	bf00      	nop
		__ASM("NOP");
 8000e9a:	bf00      	nop
		__ASM("NOP");
 8000e9c:	bf00      	nop
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40020058 	.word	0x40020058
 8000eac:	40013804 	.word	0x40013804
 8000eb0:	20000104 	.word	0x20000104

08000eb4 <USART1_TX_DMA_IRQ_Callback>:
 * @note
 * @param   None
 * @retval  None
 */
void USART1_TX_DMA_IRQ_Callback(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	 /* Check transfer complete flag */
	if((DMA1->ISR & DMA_ISR_TCIF4) == DMA_ISR_TCIF4)
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <USART1_TX_DMA_IRQ_Callback+0x44>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ec4:	d110      	bne.n	8000ee8 <USART1_TX_DMA_IRQ_Callback+0x34>
	{
		/* DMA transfer is complete */

	    /* Clear transfer complete flag */
		DMA1->IFCR |= DMA_IFCR_CTCIF4;
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <USART1_TX_DMA_IRQ_Callback+0x44>)
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <USART1_TX_DMA_IRQ_Callback+0x44>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ed0:	6053      	str	r3, [r2, #4]

        while((USART1->SR& USART_SR_TC) != USART_SR_TC){}
 8000ed2:	bf00      	nop
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <USART1_TX_DMA_IRQ_Callback+0x48>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	2b40      	cmp	r3, #64	; 0x40
 8000ee0:	d1f8      	bne.n	8000ed4 <USART1_TX_DMA_IRQ_Callback+0x20>
	    /* Disable DMA 1 Channel 4 */
	    DMA_ChannelDisable(DMA1_Channel4);
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <USART1_TX_DMA_IRQ_Callback+0x4c>)
 8000ee4:	f7ff fdd8 	bl	8000a98 <DMA_ChannelDisable>
	}

	 /* Clears the GIF, TEIF, HTIF and TCIF flags in the DMA_ISR register */
    	DMA1->IFCR |= DMA_IFCR_CGIF4;
 8000ee8:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <USART1_TX_DMA_IRQ_Callback+0x44>)
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <USART1_TX_DMA_IRQ_Callback+0x44>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef2:	6053      	str	r3, [r2, #4]
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40013800 	.word	0x40013800
 8000f00:	40020044 	.word	0x40020044

08000f04 <USART1_RX_DMA_IRQ_Callback>:
 * @note
 * @param   None
 * @retval  None
 */
void USART1_RX_DMA_IRQ_Callback(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  /* Check transfer complete flag */

	//if((DMA1->ISR & DMA_ISR_TCIF5) == DMA_ISR_TCIF5)
  //{
    /* Calculate amount of data received */
    RxMessageLength = MAX_BUFFER_LENGTH - DMA1_Channel5->CNDTR;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <USART1_RX_DMA_IRQ_Callback+0x7c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8000f14:	1a9b      	subs	r3, r3, r2
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <USART1_RX_DMA_IRQ_Callback+0x80>)
 8000f1a:	701a      	strb	r2, [r3, #0]
    /* Reset address for memory */
 	DMA1_Channel5 ->CMAR   = (uint32_t)RxDMABuffer;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <USART1_RX_DMA_IRQ_Callback+0x7c>)
 8000f1e:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <USART1_RX_DMA_IRQ_Callback+0x84>)
 8000f20:	60da      	str	r2, [r3, #12]

	/* Reset number of data items */
 	DMA1_Channel5 ->CNDTR  =  MAX_BUFFER_LENGTH;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <USART1_RX_DMA_IRQ_Callback+0x7c>)
 8000f24:	22c8      	movs	r2, #200	; 0xc8
 8000f26:	605a      	str	r2, [r3, #4]

    /* Copy data into RX buffer */
    for(int idx = 0; idx < RxMessageLength; idx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	e00b      	b.n	8000f46 <USART1_RX_DMA_IRQ_Callback+0x42>
    {
      RxBuffer[idx] = RxDMABuffer[idx];
 8000f2e:	4a16      	ldr	r2, [pc, #88]	; (8000f88 <USART1_RX_DMA_IRQ_Callback+0x84>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	7819      	ldrb	r1, [r3, #0]
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <USART1_RX_DMA_IRQ_Callback+0x88>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]
    for(int idx = 0; idx < RxMessageLength; idx++)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3301      	adds	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <USART1_RX_DMA_IRQ_Callback+0x80>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dced      	bgt.n	8000f2e <USART1_RX_DMA_IRQ_Callback+0x2a>
    }

    /* Check error status */
    if(USART1_NO_ERROR != currentErrorStatus)
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <USART1_RX_DMA_IRQ_Callback+0x8c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <USART1_RX_DMA_IRQ_Callback+0x5c>
    {
      /* Error detected, discard the received data */
      RxMessageLength = 0;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <USART1_RX_DMA_IRQ_Callback+0x80>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
      /* No error detected */
    }


	 /* Clears the GIF, TEIF, HTIF and TCIF flags in the DMA_ISR register */
   	DMA1->IFCR |= DMA_IFCR_CGIF5;
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <USART1_RX_DMA_IRQ_Callback+0x90>)
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <USART1_RX_DMA_IRQ_Callback+0x90>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6053      	str	r3, [r2, #4]

    /* Enable DMA 1 Channel 5 */
   	DMA_ChannelEnable(DMA1_Channel5,1,5);
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <USART1_RX_DMA_IRQ_Callback+0x7c>)
 8000f72:	f7ff fd5f 	bl	8000a34 <DMA_ChannelEnable>
 // }
  //else
  //{
    /* Do nothing, this interrupt is not handled */
  //}
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020058 	.word	0x40020058
 8000f84:	20000100 	.word	0x20000100
 8000f88:	20000104 	.word	0x20000104
 8000f8c:	20000038 	.word	0x20000038
 8000f90:	20000035 	.word	0x20000035
 8000f94:	40020000 	.word	0x40020000

08000f98 <USART_Send_String>:
 * @note
 * @param   USARTX, str
 * @retval  None
 */
void USART_Send_String(USART_TypeDef *USARTx,const char *str)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
 /* Check null pointers */
 if(NULL != str)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d020      	beq.n	8000fea <USART_Send_String+0x52>
  {

	 /* Wait until DMA1 Channel 4 is disabled */
     while(DMA_CCR1_EN == (DMA_CCR1_EN & DMA1_Channel4->CCR))
 8000fa8:	bf00      	nop
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <USART_Send_String+0x5c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <USART_Send_String+0x12>
	    {
	      /* Do nothing, the enable flag shall reset
	       * when DMA transfer complete */
	    }
     /* Set address for memory */
     DMA1_Channel4 ->CMAR   = (uint32_t)str;
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <USART_Send_String+0x5c>)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	60d3      	str	r3, [r2, #12]

     /* Set no. of data to transfer */
     int size =0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
     while(*str++ != '\0')size++;
 8000fc0:	e002      	b.n	8000fc8 <USART_Send_String+0x30>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	603a      	str	r2, [r7, #0]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f6      	bne.n	8000fc2 <USART_Send_String+0x2a>

     DMA1_Channel4 ->CNDTR  = ++size;
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <USART_Send_String+0x5c>)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6053      	str	r3, [r2, #4]
     /* Enable DMA */
    DMA_ChannelEnable(DMA1_Channel4,1,4);
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <USART_Send_String+0x5c>)
 8000fe6:	f7ff fd25 	bl	8000a34 <DMA_ChannelEnable>
  }
 else
 {
   /* Null pointers, do nothing */
 }
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020044 	.word	0x40020044

08000ff8 <USART1_GPIO_Init>:
 *          "Table 24. USARTs" in Reference manual
 * @param   HFC if = 1 -> Init. CTS & RTS pins
 * @retval  None
 */
void USART1_GPIO_Init(uint8_t HFC)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
 /* GPIOA clock enable */
  	RCC ->APB2ENR   |= RCC_APB2ENR_IOPAEN;
 8001002:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <USART1_GPIO_Init+0xd0>)
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <USART1_GPIO_Init+0xd0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6193      	str	r3, [r2, #24]

 /* PA9 TX: Output mode, max speed 2 MHz. */
	GPIOA ->CRH     &= ~GPIO_CRH_MODE9;
 800100e:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001018:	6053      	str	r3, [r2, #4]
	GPIOA ->CRH     |=  GPIO_CRH_MODE9_1;
 800101a:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	6053      	str	r3, [r2, #4]

 /* PA9 TX: Alternate function output Push-pull */
  	GPIOA ->CRH     &= ~GPIO_CRH_CNF9;
 8001026:	4a29      	ldr	r2, [pc, #164]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001030:	6053      	str	r3, [r2, #4]
    GPIOA ->CRH     |=  GPIO_CRH_CNF9_1;
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6053      	str	r3, [r2, #4]

 /* PA10 RX: Floating input */
  	GPIOA ->CRH     &= ~GPIO_CRH_CNF10;
 800103e:	4a23      	ldr	r2, [pc, #140]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001048:	6053      	str	r3, [r2, #4]
    GPIOA ->CRH     |=  GPIO_CRH_CNF10_0;
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001054:	6053      	str	r3, [r2, #4]

 /* PA10 RX: Input mode */
  	GPIOA ->CRH     &= ~GPIO_CRH_MODE10;
 8001056:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001060:	6053      	str	r3, [r2, #4]
 if(HFC == 1)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d129      	bne.n	80010bc <USART1_GPIO_Init+0xc4>
 {
 /* PA11 CTS: Floating input */
    GPIOA ->CRH     &= ~GPIO_CRH_CNF11;
 8001068:	4a18      	ldr	r2, [pc, #96]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001072:	6053      	str	r3, [r2, #4]
  	GPIOA ->CRH     |=  GPIO_CRH_CNF11_0;
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107e:	6053      	str	r3, [r2, #4]

 /* PA11 CTS: Input mode */
  	GPIOA ->CRH     &= ~GPIO_CRH_MODE11;
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800108a:	6053      	str	r3, [r2, #4]

 /* PA12 RTS: Output mode, max speed 2 MHz. */
  	GPIOA ->CRH     &= ~GPIO_CRH_MODE12;
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <USART1_GPIO_Init+0xd4>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001096:	6053      	str	r3, [r2, #4]
  	GPIOA ->CRH     |=  GPIO_CRH_MODE12_1;
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <USART1_GPIO_Init+0xd4>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a2:	6053      	str	r3, [r2, #4]

 /* PA12 RTS: Alternate function output Push-pull */
  	GPIOA ->CRH     &= ~GPIO_CRH_CNF12;
 80010a4:	4a09      	ldr	r2, [pc, #36]	; (80010cc <USART1_GPIO_Init+0xd4>)
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <USART1_GPIO_Init+0xd4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80010ae:	6053      	str	r3, [r2, #4]
  	GPIOA ->CRH     |=  GPIO_CRH_CNF12_1;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <USART1_GPIO_Init+0xd4>)
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <USART1_GPIO_Init+0xd4>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010ba:	6053      	str	r3, [r2, #4]
 }


}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010800 	.word	0x40010800

080010d0 <Cal_USART_BRR_Val>:
 * @param   Baud_Rate:    Desired Baud Rate value
 *          F_CK:         Input clock to the peripheral in Hz
 * @retval  Value of BRR
 */
uint16_t Cal_USART_BRR_Val(uint32_t Baud_Rate, uint32_t F_CK)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	 double USARTDIV=0;
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	f04f 0400 	mov.w	r4, #0
 80010e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	    * DIV_Fraction = 16 * 0.0625 = 1 = 0x1
	    * DIV_Mantissa = 39 = 0x27
	    *
	    * BRR          = 0x271 */

	  USARTDIV    = ( F_CK/(Baud_Rate*16.0) );
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f7ff f972 	bl	80003d0 <__aeabi_ui2d>
 80010ec:	4604      	mov	r4, r0
 80010ee:	460d      	mov	r5, r1
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f96d 	bl	80003d0 <__aeabi_ui2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <Cal_USART_BRR_Val+0xd4>)
 80010fc:	f7ff f9de 	bl	80004bc <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4620      	mov	r0, r4
 8001106:	4629      	mov	r1, r5
 8001108:	f7ff fb02 	bl	8000710 <__aeabi_ddiv>
 800110c:	4603      	mov	r3, r0
 800110e:	460c      	mov	r4, r1
 8001110:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  Fraction = round( (USARTDIV - ((uint16_t)USARTDIV) )* 16 ) ;
 8001114:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001118:	f7ff fbe2 	bl	80008e0 <__aeabi_d2uiz>
 800111c:	4603      	mov	r3, r0
 800111e:	b29b      	uxth	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f965 	bl	80003f0 <__aeabi_i2d>
 8001126:	4603      	mov	r3, r0
 8001128:	460c      	mov	r4, r1
 800112a:	461a      	mov	r2, r3
 800112c:	4623      	mov	r3, r4
 800112e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001132:	f7ff f80f 	bl	8000154 <__aeabi_dsub>
 8001136:	4603      	mov	r3, r0
 8001138:	460c      	mov	r4, r1
 800113a:	4618      	mov	r0, r3
 800113c:	4621      	mov	r1, r4
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <Cal_USART_BRR_Val+0xd4>)
 8001144:	f7ff f9ba 	bl	80004bc <__aeabi_dmul>
 8001148:	4603      	mov	r3, r0
 800114a:	460c      	mov	r4, r1
 800114c:	4618      	mov	r0, r3
 800114e:	4621      	mov	r1, r4
 8001150:	f000 fbb4 	bl	80018bc <round>
 8001154:	4603      	mov	r3, r0
 8001156:	460c      	mov	r4, r1
 8001158:	4618      	mov	r0, r3
 800115a:	4621      	mov	r1, r4
 800115c:	f7ff fbc0 	bl	80008e0 <__aeabi_d2uiz>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
	  if(Fraction > 15)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	d90c      	bls.n	8001184 <Cal_USART_BRR_Val+0xb4>
		 {
		    Fraction=0;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
		    USARTDIV++;
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <Cal_USART_BRR_Val+0xd8>)
 8001174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001178:	f7fe ffee 	bl	8000158 <__adddf3>
 800117c:	4603      	mov	r3, r0
 800117e:	460c      	mov	r4, r1
 8001180:	e9c7 3404 	strd	r3, r4, [r7, #16]
		 }
	  return ( ( ((uint16_t)USARTDIV) << 4 ) + Fraction) ;
 8001184:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001188:	f7ff fbaa 	bl	80008e0 <__aeabi_d2uiz>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	b29a      	uxth	r2, r3
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	40300000 	.word	0x40300000
 80011a8:	3ff00000 	.word	0x3ff00000

080011ac <USART1_Init>:
 * @note    None
 * @param   BRR_Val:     Can be calculated using Cal_USART_BRR_Val function
 * @retval  None
 */
void USART1_Init(uint16_t BRR_Val)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]

	/* USART GPIO configuration -------------------------------------------------------*/

	  /* Configuration GPIOA TX & RX based on Reference manual Table 24 & Table 54	*/
		USART1_GPIO_Init(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff ff1e 	bl	8000ff8 <USART1_GPIO_Init>

	/* USART configuration -------------------------------------------------------*/
	   /*Enable USART1 clock */
	   RCC ->APB2ENR   |=  RCC_APB2ENR_USART1EN;
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <USART1_Init+0x94>)
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <USART1_Init+0x94>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6193      	str	r3, [r2, #24]

	   /* select 1 Start bit, 9 Data bits, n Stop bit  */
	   USART1 ->CR1    |= USART_CR1_M;
 80011c8:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <USART1_Init+0x98>)
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <USART1_Init+0x98>)
 80011cc:	899b      	ldrh	r3, [r3, #12]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8193      	strh	r3, [r2, #12]

	   /* STOP bits, 00: 1 Stop bit */
	   USART1->CR2    &= ~USART_CR2_STOP;
 80011d8:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <USART1_Init+0x98>)
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <USART1_Init+0x98>)
 80011dc:	8a1b      	ldrh	r3, [r3, #16]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	8213      	strh	r3, [r2, #16]

	   /* Select odd parity */
	   USART1->CR1 |= USART_CR1_PS;
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <USART1_Init+0x98>)
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <USART1_Init+0x98>)
 80011ec:	899b      	ldrh	r3, [r3, #12]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	8193      	strh	r3, [r2, #12]

	   /* Enable parity control */
	   USART1->CR1 |= USART_CR1_PCE;
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <USART1_Init+0x98>)
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <USART1_Init+0x98>)
 80011fc:	899b      	ldrh	r3, [r3, #12]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001204:	b29b      	uxth	r3, r3
 8001206:	8193      	strh	r3, [r2, #12]

	   /* Set Baud Rate */
	   USART1->BRR = BRR_Val;
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <USART1_Init+0x98>)
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	8113      	strh	r3, [r2, #8]

 	   /* DMA mode enabled for reception */
	   USART1->CR3  |= USART_CR3_DMAR;
 800120e:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <USART1_Init+0x98>)
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <USART1_Init+0x98>)
 8001212:	8a9b      	ldrh	r3, [r3, #20]
 8001214:	b29b      	uxth	r3, r3
 8001216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121a:	b29b      	uxth	r3, r3
 800121c:	8293      	strh	r3, [r2, #20]

       /* DMA mode enabled for transmitting */
	   USART1->CR3  |= USART_CR3_DMAT;
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <USART1_Init+0x98>)
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <USART1_Init+0x98>)
 8001222:	8a9b      	ldrh	r3, [r3, #20]
 8001224:	b29b      	uxth	r3, r3
 8001226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122a:	b29b      	uxth	r3, r3
 800122c:	8293      	strh	r3, [r2, #20]
 	  //USART1->CR3 |= USART_CR3_RTSE;

       /* Enable CTS flow control */
 	  //USART1->CR3 |= USART_CR3_CTSE;

		__ASM("NOP");
 800122e:	bf00      	nop
		__ASM("NOP");
 8001230:	bf00      	nop
		__ASM("NOP");
 8001232:	bf00      	nop
		__ASM("NOP");
 8001234:	bf00      	nop

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40013800 	.word	0x40013800

08001248 <USART_Enable>:
 * @note
 * @param   USARTx ,where x=1 ..3
 * @retval  None
 */
void USART_Enable(USART_TypeDef *USARTx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Enable USART1 */
  USARTx->CR1 |= USART_CR1_UE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	899b      	ldrh	r3, [r3, #12]
 8001254:	b29b      	uxth	r3, r3
 8001256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	819a      	strh	r2, [r3, #12]

  /* Enable transmitter */
  USARTx->CR1 |= USART_CR1_TE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	899b      	ldrh	r3, [r3, #12]
 8001264:	b29b      	uxth	r3, r3
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	819a      	strh	r2, [r3, #12]

  /* Enable receiver */
  USARTx->CR1 |= USART_CR1_RE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	899b      	ldrh	r3, [r3, #12]
 8001274:	b29b      	uxth	r3, r3
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	b29a      	uxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	819a      	strh	r2, [r3, #12]

  /* Enable reception buffer not empty flag interrupt */
  USARTx->CR1 |= USART_CR1_RXNEIE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	899b      	ldrh	r3, [r3, #12]
 8001284:	b29b      	uxth	r3, r3
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	819a      	strh	r2, [r3, #12]

  /* Enable parity error interrupt */
  USARTx->CR1 |= USART_CR1_PEIE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	899b      	ldrh	r3, [r3, #12]
 8001294:	b29b      	uxth	r3, r3
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	b29a      	uxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	819a      	strh	r2, [r3, #12]

  /* Enable idle line detection interrupt */
  USARTx->CR1 |= USART_CR1_IDLEIE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	899b      	ldrh	r3, [r3, #12]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	819a      	strh	r2, [r3, #12]

}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
	...

080012bc <USART1_Process>:
 * @note
 * @param   None
 * @retval  None
 */
void USART1_Process(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* Check error status */
  if(USART1_NO_ERROR == currentErrorStatus)
 80012c2:	4b64      	ldr	r3, [pc, #400]	; (8001454 <USART1_Process+0x198>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 80ac 	bne.w	8001424 <USART1_Process+0x168>
  {
    /* Check current USART state */
    switch (currentState)
 80012cc:	4b62      	ldr	r3, [pc, #392]	; (8001458 <USART1_Process+0x19c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	f200 80b3 	bhi.w	800143c <USART1_Process+0x180>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <USART1_Process+0x20>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080012f1 	.word	0x080012f1
 80012e0:	08001301 	.word	0x08001301
 80012e4:	08001319 	.word	0x08001319
 80012e8:	08001329 	.word	0x08001329
 80012ec:	08001361 	.word	0x08001361
    {
      case USART1_IDLE:
        /* Transmit data */
    	  USART_Send_String(USART1, hello_world);
 80012f0:	495a      	ldr	r1, [pc, #360]	; (800145c <USART1_Process+0x1a0>)
 80012f2:	485b      	ldr	r0, [pc, #364]	; (8001460 <USART1_Process+0x1a4>)
 80012f4:	f7ff fe50 	bl	8000f98 <USART_Send_String>

        /* Go to next state */
        currentState = USART1_WAIT_FOR_RESPONCE;
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <USART1_Process+0x19c>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
        break;
 80012fe:	e0a4      	b.n	800144a <USART1_Process+0x18e>

      case USART1_WAIT_FOR_RESPONCE:
        /* Check if new message received */
        if(0 != RxMessageLength)
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <USART1_Process+0x1a8>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 809b 	beq.w	8001440 <USART1_Process+0x184>
        {
          /* Reset message length */
          RxMessageLength = 0;
 800130a:	4b56      	ldr	r3, [pc, #344]	; (8001464 <USART1_Process+0x1a8>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]

          /* Go to next state */
          currentState = USART1_ASK_FOR_NAME;
 8001310:	4b51      	ldr	r3, [pc, #324]	; (8001458 <USART1_Process+0x19c>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          /* Nothing received yet */
        }
        break;
 8001316:	e093      	b.n	8001440 <USART1_Process+0x184>

      case USART1_ASK_FOR_NAME:
        /* Transmit data */
    	  USART_Send_String(USART1, ask_for_name);
 8001318:	4953      	ldr	r1, [pc, #332]	; (8001468 <USART1_Process+0x1ac>)
 800131a:	4851      	ldr	r0, [pc, #324]	; (8001460 <USART1_Process+0x1a4>)
 800131c:	f7ff fe3c 	bl	8000f98 <USART_Send_String>

        /* Go to next state */
        currentState = USART1_WAIT_FOR_NAME;
 8001320:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <USART1_Process+0x19c>)
 8001322:	2203      	movs	r2, #3
 8001324:	701a      	strb	r2, [r3, #0]
        break;
 8001326:	e090      	b.n	800144a <USART1_Process+0x18e>

      case USART1_WAIT_FOR_NAME:
        /* Check if new message received */
        if(0 != RxMessageLength)
 8001328:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <USART1_Process+0x1a8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8089 	beq.w	8001444 <USART1_Process+0x188>
        {
          /* Transmit data */
        	USART_Send_String(USART1, hi);
 8001332:	494e      	ldr	r1, [pc, #312]	; (800146c <USART1_Process+0x1b0>)
 8001334:	484a      	ldr	r0, [pc, #296]	; (8001460 <USART1_Process+0x1a4>)
 8001336:	f7ff fe2f 	bl	8000f98 <USART_Send_String>
        	USART_Send_String(USART1, RxBuffer);
 800133a:	494d      	ldr	r1, [pc, #308]	; (8001470 <USART1_Process+0x1b4>)
 800133c:	4848      	ldr	r0, [pc, #288]	; (8001460 <USART1_Process+0x1a4>)
 800133e:	f7ff fe2b 	bl	8000f98 <USART_Send_String>
        	USART_Send_String(USART1,ask_for_command);
 8001342:	494c      	ldr	r1, [pc, #304]	; (8001474 <USART1_Process+0x1b8>)
 8001344:	4846      	ldr	r0, [pc, #280]	; (8001460 <USART1_Process+0x1a4>)
 8001346:	f7ff fe27 	bl	8000f98 <USART_Send_String>
        	USART_Send_String(USART1,ask_for_command_ex);
 800134a:	494b      	ldr	r1, [pc, #300]	; (8001478 <USART1_Process+0x1bc>)
 800134c:	4844      	ldr	r0, [pc, #272]	; (8001460 <USART1_Process+0x1a4>)
 800134e:	f7ff fe23 	bl	8000f98 <USART_Send_String>

          /* Reset message length */
          RxMessageLength = 0;
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <USART1_Process+0x1a8>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]

          /* Go to next state */
          currentState = USART1_WAIT_FOR_COMMAND;
 8001358:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <USART1_Process+0x19c>)
 800135a:	2204      	movs	r2, #4
 800135c:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          /* Nothing received yet */
        }
        break;
 800135e:	e071      	b.n	8001444 <USART1_Process+0x188>

      case USART1_WAIT_FOR_COMMAND:
        /* Check if new message received */
        if(0 != RxMessageLength)
 8001360:	4b40      	ldr	r3, [pc, #256]	; (8001464 <USART1_Process+0x1a8>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d06f      	beq.n	8001448 <USART1_Process+0x18c>
        {
          /* Reset message length */
          RxMessageLength = 0;
 8001368:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <USART1_Process+0x1a8>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]

          /* String compare results */
          strCmpReturnType isMatch_01 = STR_NOT_EQUAL;
 800136e:	2300      	movs	r3, #0
 8001370:	713b      	strb	r3, [r7, #4]
          strCmpReturnType isMatch_02 = STR_NOT_EQUAL;
 8001372:	2300      	movs	r3, #0
 8001374:	71fb      	strb	r3, [r7, #7]
          strCmpReturnType isMatch_03 = STR_NOT_EQUAL;
 8001376:	2300      	movs	r3, #0
 8001378:	71bb      	strb	r3, [r7, #6]
          strCmpReturnType isMatch_04 = STR_NOT_EQUAL;
 800137a:	2300      	movs	r3, #0
 800137c:	717b      	strb	r3, [r7, #5]

          /* Compare with turn on green led command */
          isMatch_01 = strCmp(turn_on_green_led, RxBuffer,
 800137e:	2212      	movs	r2, #18
 8001380:	493b      	ldr	r1, [pc, #236]	; (8001470 <USART1_Process+0x1b4>)
 8001382:	483e      	ldr	r0, [pc, #248]	; (800147c <USART1_Process+0x1c0>)
 8001384:	f7ff fc6a 	bl	8000c5c <strCmp>
 8001388:	4603      	mov	r3, r0
 800138a:	713b      	strb	r3, [r7, #4]
              sizeof(turn_on_green_led));

          /* Check return status */
          if(STR_EQUAL == isMatch_01)
 800138c:	793b      	ldrb	r3, [r7, #4]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d104      	bne.n	800139c <USART1_Process+0xe0>
          {
            /* Turn on green led */
           // GPIO_TurnON_LED(EVAL_GREEN_LED);

            /* Transmit data */
            USART_Send_String(USART1,done);
 8001392:	493b      	ldr	r1, [pc, #236]	; (8001480 <USART1_Process+0x1c4>)
 8001394:	4832      	ldr	r0, [pc, #200]	; (8001460 <USART1_Process+0x1a4>)
 8001396:	f7ff fdff 	bl	8000f98 <USART_Send_String>
 800139a:	e006      	b.n	80013aa <USART1_Process+0xee>
          }
          else
          {
            /* Compare with turn on red led command */
            isMatch_02 = strCmp(turn_on_red_led, RxBuffer,
 800139c:	2210      	movs	r2, #16
 800139e:	4934      	ldr	r1, [pc, #208]	; (8001470 <USART1_Process+0x1b4>)
 80013a0:	4838      	ldr	r0, [pc, #224]	; (8001484 <USART1_Process+0x1c8>)
 80013a2:	f7ff fc5b 	bl	8000c5c <strCmp>
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
                sizeof(turn_on_red_led));
          }

          /* Check return status */
          if(STR_EQUAL == isMatch_02)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d104      	bne.n	80013ba <USART1_Process+0xfe>
          {
            /* Turn on red led */
           // GPIO_TurnON_LED(EVAL_RED_LED);

            /* Transmit data */
            USART_Send_String(USART1,done);
 80013b0:	4933      	ldr	r1, [pc, #204]	; (8001480 <USART1_Process+0x1c4>)
 80013b2:	482b      	ldr	r0, [pc, #172]	; (8001460 <USART1_Process+0x1a4>)
 80013b4:	f7ff fdf0 	bl	8000f98 <USART_Send_String>
 80013b8:	e009      	b.n	80013ce <USART1_Process+0x112>
          }
          else if(STR_NOT_EQUAL == isMatch_01)
 80013ba:	793b      	ldrb	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d106      	bne.n	80013ce <USART1_Process+0x112>
          {
            /* Compare with turn off green led command */
            isMatch_03 = strCmp(turn_off_green_led, RxBuffer,
 80013c0:	2213      	movs	r2, #19
 80013c2:	492b      	ldr	r1, [pc, #172]	; (8001470 <USART1_Process+0x1b4>)
 80013c4:	4830      	ldr	r0, [pc, #192]	; (8001488 <USART1_Process+0x1cc>)
 80013c6:	f7ff fc49 	bl	8000c5c <strCmp>
 80013ca:	4603      	mov	r3, r0
 80013cc:	71bb      	strb	r3, [r7, #6]
          {
            /* Do nothing */
          }

          /* Check return status */
          if(STR_EQUAL == isMatch_03)
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d104      	bne.n	80013de <USART1_Process+0x122>
          {
            /* Turn off green led */
           // GPIO_TurnOFF_LED(EVAL_GREEN_LED);

            /* Transmit data */
            USART_Send_String(USART1,done);
 80013d4:	492a      	ldr	r1, [pc, #168]	; (8001480 <USART1_Process+0x1c4>)
 80013d6:	4822      	ldr	r0, [pc, #136]	; (8001460 <USART1_Process+0x1a4>)
 80013d8:	f7ff fdde 	bl	8000f98 <USART_Send_String>
 80013dc:	e00c      	b.n	80013f8 <USART1_Process+0x13c>
          }
          else if((STR_NOT_EQUAL == isMatch_02)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d109      	bne.n	80013f8 <USART1_Process+0x13c>
              && (STR_NOT_EQUAL == isMatch_01))
 80013e4:	793b      	ldrb	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <USART1_Process+0x13c>
          {
            /* Compare with turn off red led command */
            isMatch_04 = strCmp(turn_off_red_led, RxBuffer,
 80013ea:	2211      	movs	r2, #17
 80013ec:	4920      	ldr	r1, [pc, #128]	; (8001470 <USART1_Process+0x1b4>)
 80013ee:	4827      	ldr	r0, [pc, #156]	; (800148c <USART1_Process+0x1d0>)
 80013f0:	f7ff fc34 	bl	8000c5c <strCmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	717b      	strb	r3, [r7, #5]
          {
            /* Do nothing */
          }

          /* Check return status */
          if(STR_EQUAL == isMatch_04)
 80013f8:	797b      	ldrb	r3, [r7, #5]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d104      	bne.n	8001408 <USART1_Process+0x14c>
          {
            /* Turn off red led */
            //GPIO_TurnOFF_LED(EVAL_RED_LED);

            /* Transmit data */
            USART_Send_String(USART1,done);
 80013fe:	4920      	ldr	r1, [pc, #128]	; (8001480 <USART1_Process+0x1c4>)
 8001400:	4817      	ldr	r0, [pc, #92]	; (8001460 <USART1_Process+0x1a4>)
 8001402:	f7ff fdc9 	bl	8000f98 <USART_Send_String>
        }
        else
        {
          /* Nothing received yet */
        }
        break;
 8001406:	e01f      	b.n	8001448 <USART1_Process+0x18c>
          else if((STR_NOT_EQUAL == isMatch_03)
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11c      	bne.n	8001448 <USART1_Process+0x18c>
              && (STR_NOT_EQUAL == isMatch_02)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d119      	bne.n	8001448 <USART1_Process+0x18c>
              && (STR_NOT_EQUAL == isMatch_01))
 8001414:	793b      	ldrb	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <USART1_Process+0x18c>
        	  USART_Send_String(USART1,wrong_command);
 800141a:	491d      	ldr	r1, [pc, #116]	; (8001490 <USART1_Process+0x1d4>)
 800141c:	4810      	ldr	r0, [pc, #64]	; (8001460 <USART1_Process+0x1a4>)
 800141e:	f7ff fdbb 	bl	8000f98 <USART_Send_String>
        break;
 8001422:	e011      	b.n	8001448 <USART1_Process+0x18c>

      default:
        break;
    }
  }
  else if(USART1_PARITY_ERROR == currentErrorStatus)
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <USART1_Process+0x198>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10e      	bne.n	800144a <USART1_Process+0x18e>
  {
    /* Transmit parity error */
	  USART_Send_String(USART1,parity_error);
 800142c:	4919      	ldr	r1, [pc, #100]	; (8001494 <USART1_Process+0x1d8>)
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <USART1_Process+0x1a4>)
 8001430:	f7ff fdb2 	bl	8000f98 <USART_Send_String>

    /* Clear error status */
    currentErrorStatus = USART1_NO_ERROR;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <USART1_Process+0x198>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* No error detected */
  }
}
 800143a:	e006      	b.n	800144a <USART1_Process+0x18e>
        break;
 800143c:	bf00      	nop
 800143e:	e004      	b.n	800144a <USART1_Process+0x18e>
        break;
 8001440:	bf00      	nop
 8001442:	e002      	b.n	800144a <USART1_Process+0x18e>
        break;
 8001444:	bf00      	nop
 8001446:	e000      	b.n	800144a <USART1_Process+0x18e>
        break;
 8001448:	bf00      	nop
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000035 	.word	0x20000035
 8001458:	20000034 	.word	0x20000034
 800145c:	08001960 	.word	0x08001960
 8001460:	40013800 	.word	0x40013800
 8001464:	20000100 	.word	0x20000100
 8001468:	08001970 	.word	0x08001970
 800146c:	08001984 	.word	0x08001984
 8001470:	20000038 	.word	0x20000038
 8001474:	08001988 	.word	0x08001988
 8001478:	080019a0 	.word	0x080019a0
 800147c:	080019d4 	.word	0x080019d4
 8001480:	08001a20 	.word	0x08001a20
 8001484:	080019e8 	.word	0x080019e8
 8001488:	080019f8 	.word	0x080019f8
 800148c:	08001a0c 	.word	0x08001a0c
 8001490:	08001a28 	.word	0x08001a28
 8001494:	08001a38 	.word	0x08001a38

08001498 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	SysTick_Init();
 800149c:	f7ff faa2 	bl	80009e4 <SysTick_Init>
    GPIO_OnBoard_Init_LED();
 80014a0:	f7ff fb0a 	bl	8000ab8 <GPIO_OnBoard_Init_LED>
    NVIC_Init();
 80014a4:	f7ff fb96 	bl	8000bd4 <NVIC_Init>

    USART1_Init(Cal_USART_BRR_Val(115200,8000000) );
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <main+0x44>)
 80014aa:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80014ae:	f7ff fe0f 	bl	80010d0 <Cal_USART_BRR_Val>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe79 	bl	80011ac <USART1_Init>
    /* Init. for USART1_TX */
    USART1_TX_DMA_Config();
 80014ba:	f7ff fc37 	bl	8000d2c <USART1_TX_DMA_Config>
    /* Init. for USART1_RX */
    USART1_RX_DMA_Config();
 80014be:	f7ff fc93 	bl	8000de8 <USART1_RX_DMA_Config>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80014c2:	b662      	cpsie	i

     __enable_irq();
    USART_Enable(USART1);
 80014c4:	4806      	ldr	r0, [pc, #24]	; (80014e0 <main+0x48>)
 80014c6:	f7ff febf 	bl	8001248 <USART_Enable>
    DMA_ChannelEnable(DMA1_Channel5,1,5);
 80014ca:	2205      	movs	r2, #5
 80014cc:	2101      	movs	r1, #1
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <main+0x4c>)
 80014d0:	f7ff fab0 	bl	8000a34 <DMA_ChannelEnable>

 while(1)
 {
	 USART1_Process();
 80014d4:	f7ff fef2 	bl	80012bc <USART1_Process>
 80014d8:	e7fc      	b.n	80014d4 <main+0x3c>
 80014da:	bf00      	nop
 80014dc:	007a1200 	.word	0x007a1200
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020058 	.word	0x40020058

080014e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014e8:	f8df d038 	ldr.w	sp, [pc, #56]	; 8001524 <LoopFillZerobss+0x16>

  /* Disable interrupt (set PRIMASK) */
  CPSID i
 80014ec:	b672      	cpsid	i

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014ee:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014f0:	e003      	b.n	80014fa <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <LoopFillZerobss+0x1a>)
	ldr	r3, [r3, r1]
 80014f4:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014f6:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014f8:	3104      	adds	r1, #4

080014fa <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <LoopFillZerobss+0x1e>)
	ldr	r3, =_edata
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <LoopFillZerobss+0x22>)
	adds	r2, r0, r1
 80014fe:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001500:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001502:	d3f6      	bcc.n	80014f2 <CopyDataInit>
	ldr	r2, =_sbss
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x26>)
	b	LoopFillZerobss
 8001506:	e002      	b.n	800150e <LoopFillZerobss>

08001508 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001508:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800150a:	f842 3b04 	str.w	r3, [r2], #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <LoopFillZerobss+0x2a>)
	cmp	r2, r3
 8001510:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001512:	d3f9      	bcc.n	8001508 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001514:	f000 f8a6 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001518:	f000 f9ac 	bl	8001874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151c:	f7ff ffbc 	bl	8001498 <main>
	bx	lr
 8001520:	4770      	bx	lr
 8001522:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001524:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001528:	08001a50 	.word	0x08001a50
	ldr	r0, =_sdata
 800152c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001530:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001534:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001538:	200001cc 	.word	0x200001cc

0800153c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_2_IRQHandler>

0800153e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
	++SysTickCounter;
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Handler+0x18>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	4a03      	ldr	r2, [pc, #12]	; (80015a0 <SysTick_Handler+0x18>)
 8001594:	6013      	str	r3, [r2, #0]
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000030 	.word	0x20000030

080015a4 <EXTI0_IRQHandler>:
  * @note   None
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

 /* Turn on Yellow LED */
    Yellow_LED_BITBAND = 0;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <EXTI0_IRQHandler+0x30>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

 /* Wait one second */
    SysTick_Delay(1000);
 80015ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b2:	f7ff fa01 	bl	80009b8 <SysTick_Delay>

 /* Turn OFF Yellow LED */
    Yellow_LED_BITBAND = 1;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <EXTI0_IRQHandler+0x30>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

 /* Wait one second */
    SysTick_Delay(1000);
 80015bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c0:	f7ff f9fa 	bl	80009b8 <SysTick_Delay>

 /* Clear pending bit */
    EXTI->PR |= EXTI_PR_PR0;
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <EXTI0_IRQHandler+0x34>)
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <EXTI0_IRQHandler+0x34>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6153      	str	r3, [r2, #20]
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	422201b4 	.word	0x422201b4
 80015d8:	40010400 	.word	0x40010400

080015dc <EXTI1_IRQHandler>:
  * @note   None
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <EXTI2_IRQHandler>:
  * @note   None
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <EXTI3_IRQHandler>:
  * @note   None
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <DMA1_Channel3_IRQHandler>:
  * @param  None
  * @retval None
  */

void DMA1_Channel3_IRQHandler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

	if((DMA1->ISR & DMA_ISR_TCIF3) == DMA_ISR_TCIF3)
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <DMA1_Channel3_IRQHandler+0x38>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800160c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001610:	d108      	bne.n	8001624 <DMA1_Channel3_IRQHandler+0x24>
	{
		/* DMA transfer is complete, turn off Yellow LED */
		Yellow_LED_BITBAND = 1;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <DMA1_Channel3_IRQHandler+0x3c>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
	    /* Clear transfer complete flag */
		DMA1->IFCR |= DMA_IFCR_CTCIF3;
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <DMA1_Channel3_IRQHandler+0x38>)
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <DMA1_Channel3_IRQHandler+0x38>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6053      	str	r3, [r2, #4]
	}

	 /* Clears the GIF, TEIF, HTIF and TCIF flags in the DMA_ISR register */
		DMA1->IFCR |= DMA_IFCR_CGIF3;
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <DMA1_Channel3_IRQHandler+0x38>)
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <DMA1_Channel3_IRQHandler+0x38>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6053      	str	r3, [r2, #4]

}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40020000 	.word	0x40020000
 800163c:	422201b4 	.word	0x422201b4

08001640 <DMA1_Channel4_IRQHandler>:
  * @brief  This function handles DMA1 Channel4 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  USART1_TX_DMA_IRQ_Callback();
 8001644:	f7ff fc36 	bl	8000eb4 <USART1_TX_DMA_IRQ_Callback>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <DMA1_Channel5_IRQHandler>:
  * @brief  This function handles DMA1 Channel5 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel5_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  USART1_RX_DMA_IRQ_Callback();
 8001650:	f7ff fc58 	bl	8000f04 <USART1_RX_DMA_IRQ_Callback>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <USART1_IRQHandler>:
  * @brief  This function handles USART1 interrupt request.
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  USART1_IRQ_Callback();
 800165c:	f7ff fb2a 	bl	8000cb4 <USART1_IRQ_Callback>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001668:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <SystemInit+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <SystemInit+0x5c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001674:	4912      	ldr	r1, [pc, #72]	; (80016c0 <SystemInit+0x5c>)
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <SystemInit+0x5c>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <SystemInit+0x60>)
 800167c:	4013      	ands	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <SystemInit+0x5c>)
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <SystemInit+0x5c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800168a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <SystemInit+0x5c>)
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <SystemInit+0x5c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <SystemInit+0x5c>)
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <SystemInit+0x5c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SystemInit+0x5c>)
 80016aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016ae:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80016b0:	f000 f878 	bl	80017a4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SystemInit+0x64>)
 80016b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	f8ff0000 	.word	0xf8ff0000
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <SystemCoreClockUpdate+0xc4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d007      	beq.n	80016fe <SystemCoreClockUpdate+0x32>
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d009      	beq.n	8001706 <SystemCoreClockUpdate+0x3a>
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d133      	bne.n	800175e <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <SystemCoreClockUpdate+0xc8>)
 80016f8:	4a27      	ldr	r2, [pc, #156]	; (8001798 <SystemCoreClockUpdate+0xcc>)
 80016fa:	601a      	str	r2, [r3, #0]
      break;
 80016fc:	e033      	b.n	8001766 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <SystemCoreClockUpdate+0xc8>)
 8001700:	4a25      	ldr	r2, [pc, #148]	; (8001798 <SystemCoreClockUpdate+0xcc>)
 8001702:	601a      	str	r2, [r3, #0]
      break;
 8001704:	e02f      	b.n	8001766 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <SystemCoreClockUpdate+0xc4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800170e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <SystemCoreClockUpdate+0xc4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0c9b      	lsrs	r3, r3, #18
 800171e:	3302      	adds	r3, #2
 8001720:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d106      	bne.n	8001736 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <SystemCoreClockUpdate+0xd0>)
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <SystemCoreClockUpdate+0xc8>)
 8001732:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001734:	e017      	b.n	8001766 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <SystemCoreClockUpdate+0xc4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4a15      	ldr	r2, [pc, #84]	; (800179c <SystemCoreClockUpdate+0xd0>)
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <SystemCoreClockUpdate+0xc8>)
 800174c:	6013      	str	r3, [r2, #0]
      break;
 800174e:	e00a      	b.n	8001766 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <SystemCoreClockUpdate+0xcc>)
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <SystemCoreClockUpdate+0xc8>)
 800175a:	6013      	str	r3, [r2, #0]
      break;
 800175c:	e003      	b.n	8001766 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <SystemCoreClockUpdate+0xc8>)
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <SystemCoreClockUpdate+0xcc>)
 8001762:	601a      	str	r2, [r3, #0]
      break;
 8001764:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <SystemCoreClockUpdate+0xc4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <SystemCoreClockUpdate+0xd4>)
 8001772:	5cd3      	ldrb	r3, [r2, r3]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemCoreClockUpdate+0xc8>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <SystemCoreClockUpdate+0xc8>)
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000
 8001794:	20000000 	.word	0x20000000
 8001798:	007a1200 	.word	0x007a1200
 800179c:	003d0900 	.word	0x003d0900
 80017a0:	20000004 	.word	0x20000004

080017a4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
 80017a8:	f000 f802 	bl	80017b0 <SetSysClockToHSE>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <SetSysClockToHSE>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockToHSE(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80017be:	4a2b      	ldr	r2, [pc, #172]	; (800186c <SetSysClockToHSE+0xbc>)
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <SetSysClockToHSE+0xbc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <SetSysClockToHSE+0xbc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d103      	bne.n	80017e8 <SetSysClockToHSE+0x38>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017e6:	d1f0      	bne.n	80017ca <SetSysClockToHSE+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <SetSysClockToHSE+0xbc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <SetSysClockToHSE+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80017f4:	2301      	movs	r3, #1
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	e001      	b.n	80017fe <SetSysClockToHSE+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d12e      	bne.n	8001862 <SetSysClockToHSE+0xb2>
  {

#if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001804:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <SetSysClockToHSE+0xc0>)
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <SetSysClockToHSE+0xc0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6013      	str	r3, [r2, #0]

    /* Flash 0 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001810:	4a17      	ldr	r2, [pc, #92]	; (8001870 <SetSysClockToHSE+0xc0>)
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <SetSysClockToHSE+0xc0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	6013      	str	r3, [r2, #0]

#ifndef STM32F10X_CL
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <SetSysClockToHSE+0xc0>)
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <SetSysClockToHSE+0xc0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6013      	str	r3, [r2, #0]
	}
#endif /* STM32F10X_CL */
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <SetSysClockToHSE+0xbc>)
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <SetSysClockToHSE+0xbc>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800182c:	4a0f      	ldr	r2, [pc, #60]	; (800186c <SetSysClockToHSE+0xbc>)
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <SetSysClockToHSE+0xbc>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <SetSysClockToHSE+0xbc>)
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <SetSysClockToHSE+0xbc>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	6053      	str	r3, [r2, #4]
    
    /* Select HSE as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <SetSysClockToHSE+0xbc>)
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <SetSysClockToHSE+0xbc>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <SetSysClockToHSE+0xbc>)
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <SetSysClockToHSE+0xbc>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6053      	str	r3, [r2, #4]

    /* Wait till HSE is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 8001854:	bf00      	nop
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <SetSysClockToHSE+0xbc>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b04      	cmp	r3, #4
 8001860:	d1f9      	bne.n	8001856 <SetSysClockToHSE+0xa6>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000
 8001870:	40022000 	.word	0x40022000

08001874 <__libc_init_array>:
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	2500      	movs	r5, #0
 8001878:	4e0c      	ldr	r6, [pc, #48]	; (80018ac <__libc_init_array+0x38>)
 800187a:	4c0d      	ldr	r4, [pc, #52]	; (80018b0 <__libc_init_array+0x3c>)
 800187c:	1ba4      	subs	r4, r4, r6
 800187e:	10a4      	asrs	r4, r4, #2
 8001880:	42a5      	cmp	r5, r4
 8001882:	d109      	bne.n	8001898 <__libc_init_array+0x24>
 8001884:	f000 f860 	bl	8001948 <_init>
 8001888:	2500      	movs	r5, #0
 800188a:	4e0a      	ldr	r6, [pc, #40]	; (80018b4 <__libc_init_array+0x40>)
 800188c:	4c0a      	ldr	r4, [pc, #40]	; (80018b8 <__libc_init_array+0x44>)
 800188e:	1ba4      	subs	r4, r4, r6
 8001890:	10a4      	asrs	r4, r4, #2
 8001892:	42a5      	cmp	r5, r4
 8001894:	d105      	bne.n	80018a2 <__libc_init_array+0x2e>
 8001896:	bd70      	pop	{r4, r5, r6, pc}
 8001898:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800189c:	4798      	blx	r3
 800189e:	3501      	adds	r5, #1
 80018a0:	e7ee      	b.n	8001880 <__libc_init_array+0xc>
 80018a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018a6:	4798      	blx	r3
 80018a8:	3501      	adds	r5, #1
 80018aa:	e7f2      	b.n	8001892 <__libc_init_array+0x1e>
 80018ac:	08001a48 	.word	0x08001a48
 80018b0:	08001a48 	.word	0x08001a48
 80018b4:	08001a48 	.word	0x08001a48
 80018b8:	08001a4c 	.word	0x08001a4c

080018bc <round>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80018c2:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80018c6:	2c13      	cmp	r4, #19
 80018c8:	4606      	mov	r6, r0
 80018ca:	460d      	mov	r5, r1
 80018cc:	460b      	mov	r3, r1
 80018ce:	468e      	mov	lr, r1
 80018d0:	dc17      	bgt.n	8001902 <round+0x46>
 80018d2:	2c00      	cmp	r4, #0
 80018d4:	da09      	bge.n	80018ea <round+0x2e>
 80018d6:	3401      	adds	r4, #1
 80018d8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80018dc:	d103      	bne.n	80018e6 <round+0x2a>
 80018de:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80018e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80018e6:	2200      	movs	r2, #0
 80018e8:	e029      	b.n	800193e <round+0x82>
 80018ea:	4916      	ldr	r1, [pc, #88]	; (8001944 <round+0x88>)
 80018ec:	4121      	asrs	r1, r4
 80018ee:	420d      	tst	r5, r1
 80018f0:	d100      	bne.n	80018f4 <round+0x38>
 80018f2:	b188      	cbz	r0, 8001918 <round+0x5c>
 80018f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018f8:	4123      	asrs	r3, r4
 80018fa:	4473      	add	r3, lr
 80018fc:	ea23 0301 	bic.w	r3, r3, r1
 8001900:	e7f1      	b.n	80018e6 <round+0x2a>
 8001902:	2c33      	cmp	r4, #51	; 0x33
 8001904:	dd0b      	ble.n	800191e <round+0x62>
 8001906:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800190a:	d105      	bne.n	8001918 <round+0x5c>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	f7fe fc22 	bl	8000158 <__adddf3>
 8001914:	4606      	mov	r6, r0
 8001916:	460d      	mov	r5, r1
 8001918:	4630      	mov	r0, r6
 800191a:	4629      	mov	r1, r5
 800191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800191e:	f04f 30ff 	mov.w	r0, #4294967295
 8001922:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8001926:	40f8      	lsrs	r0, r7
 8001928:	4206      	tst	r6, r0
 800192a:	d0f5      	beq.n	8001918 <round+0x5c>
 800192c:	2101      	movs	r1, #1
 800192e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001932:	40a1      	lsls	r1, r4
 8001934:	198a      	adds	r2, r1, r6
 8001936:	bf28      	it	cs
 8001938:	3301      	addcs	r3, #1
 800193a:	ea22 0200 	bic.w	r2, r2, r0
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	e7e7      	b.n	8001914 <round+0x58>
 8001944:	000fffff 	.word	0x000fffff

08001948 <_init>:
 8001948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194a:	bf00      	nop
 800194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194e:	bc08      	pop	{r3}
 8001950:	469e      	mov	lr, r3
 8001952:	4770      	bx	lr

08001954 <_fini>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	bf00      	nop
 8001958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195a:	bc08      	pop	{r3}
 800195c:	469e      	mov	lr, r3
 800195e:	4770      	bx	lr
